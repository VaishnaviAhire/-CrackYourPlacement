import java.util.ArrayList;
import java.util.List;

class Solution {
    public List<List<String>> solveNQueens(int n) {
        List<List<String>> solutions = new ArrayList<>(); // Correct initialization
        char[][] board = new char[n][n];

        // Initialize the board with dots (representing empty spaces)
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                board[i][j] = '.';
            }
        }

        printsafeQueen(board, 0, solutions); // Start from the first row
        return solutions; // Return the list of solutions
    }

    void printsafeQueen(char[][] board, int row, List<List<String>> solutions) {
        if (row == board.length) {
            // When a valid configuration is found, add it to the solutions
            solutions.add(getBoardConfiguration(board));
            return;
        }

        for (int col = 0; col < board.length; col++) {
            if (isSafe(board, row, col)) {
                board[row][col] = 'Q'; // Place queen
                printsafeQueen(board, row + 1, solutions); // Recur for the next row
                board[row][col] = '.'; // Backtrack
            }
        }
    }

    public List<String> getBoardConfiguration(char[][] board) {
        List<String> result = new ArrayList<>();
        for (int i = 0; i < board.length; i++) {
            result.add(new String(board[i])); // Convert char array row to string
        }
        return result; // Return a single board configuration as a list of strings
    }

    boolean isSafe(char[][] board, int row, int col) {
        // Vertical up
        for (int i = row - 1; i >= 0; i--) {
            if (board[i][col] == 'Q') {
                return false;
            }
        }

        // Diagonal left
        for (int i = row - 1, j = col - 1; i >= 0 && j >= 0; i--, j--) {
            if (board[i][j] == 'Q') {
                return false;
            }
        }

        // Diagonal right
        for (int i = row - 1, j = col + 1; i >= 0 && j < board.length; i--, j++) {
            if (board[i][j] == 'Q') {
                return false;
            }
        }
        return true;
    }
}
